#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <unistd.h>

void print_binary(unsigned int num) {
    if (num > 1) {
        print_binary(num / 2);
    }
    putchar('0' + num % 2);
}

void print_nonprintable(char *str) {
    while (*str) {
        if (*str < 32 || *str >= 127) {
            // Print non-printable character in the format \xXX (hexadecimal value)
            printf("\\x%02X", (unsigned char)*str);
        } else {
            // Print printable character
            putchar(*str);
        }
        str++;
    }
}

int _printf(const char *format, ...) {
    va_list args;
    va_start(args, format);

    int count = 0; // To keep track of the number of characters printed
    char buffer[1024];
    char *bufptr = buffer; // Pointer to the current position in the buffer

    while (*format) {
        if (*format == '%') {
            format++; // Move past '%'
            if (*format == '\0') // Ensure the format string doesn't end with '%'
                break;

            int force_sign = 0;
            int leave_space = 0;
            int use_prefix = 0;
            int width = 0; // Field width
            int precision = -1; // Precision (default -1 means not specified)
            int zero_padding = 0;

            while (*format == '+' || *format == ' ' || *format == '#' || *format == '0' || (*format >= '0' && *format <= '9') || *format == '.') {
                if (*format == '+') {
                    force_sign = 1;
                } else if (*format == ' ') {
                    leave_space = 1;
                } else if (*format == '#') {
                    use_prefix = 1;
                } else if (*format == '0') {
                    zero_padding = 1;
                } else if (*format >= '0' && *format <= '9') {
                    // Parse the field width
                    width = width * 10 + (*format - '0');
                } else if (*format == '.') {
                    // Precision specifier found
                    format++; // Move past the dot
                    if (*format == '*') {
                        // Precision is passed as an argument
                        precision = va_arg(args, int);
                    } else {
                        // Precision is a specific number
                        precision = 0;
                        while (*format >= '0' && *format <= '9') {
                            precision = precision * 10 + (*format - '0');
                            format++;
                        }
                        format--; // Move back one character for consistency
                    }
                }
                format++;
            }

            if (*format == 'c') {
                // Handle character
                char c = va_arg(args, int); // char is promoted to int
                *bufptr = c;
                bufptr++;
                count++;
            } else if (*format == 's') {
                // Handle string with precision
                char *str = va_arg(args, char *);
                if (str == NULL)
                    str = "(null)";
                int len = (precision >= 0 && precision < strlen(str)) ? precision : strlen(str);
                if (width > 0 && len < width) {
                    // If the field width is specified and the string is shorter, pad with '0' or spaces based on the '0' flag
                    int padding = width - len;
                    while (padding > 0) {
                        *bufptr = zero_padding ? '0' : ' ';
                        bufptr++;
                        padding--;
                        count++;
                    }
                }
                strncpy(bufptr, str, len);
                bufptr += len;
                count += len;
            } else if (*format == 'd' || *format == 'i') {
                // Handle integer
                int num = va_arg(args, int);
                if (force_sign && num >= 0) {
                    *bufptr = '+';
                    bufptr++;
                } else if (!force_sign && leave_space && num >= 0) {
                    *bufptr = ' ';
                    bufptr++;
                }
                int len = snprintf(bufptr, 1024, "%d", num);
                if (width > 0 && len < width) {
                    // If the field width is specified and the number is shorter, pad with '0' or spaces based on the '0' flag
                    int padding = width - len;
                    while (padding > 0) {
                        *bufptr = zero_padding ? '0' : ' ';
                        bufptr++;
                        padding--;
                        count++;
                    }
                }
                bufptr += len;
                count += len;
            } else if (*format == 'u') {
                // Handle unsigned decimal
                unsigned int num = va_arg(args, unsigned int);
                if (force_sign) {
                    *bufptr = '+';
                    bufptr++;
                }
                int len = snprintf(bufptr, 1024, "%u", num);
                if (width > 0 && len < width) {
                    // If the field width is specified and the number is shorter, pad with '0' or spaces based on the '0' flag
                    int padding = width - len;
                    while (padding > 0) {
                        *bufptr = zero_padding ? '0' : ' ';
                        bufptr++;
                        padding--;
                        count++;
                    }
                }
                bufptr += len;
                count += len;
            } else if (*format == 'o') {
                // Handle octal
                unsigned int num = va_arg(args, unsigned int);
                if (use_prefix && num != 0) {
                    *bufptr = '0';
                    bufptr++;
                }
                int len = snprintf(bufptr, 1024, "%o", num);
                if (width > 0 && len < width) {
                    // If the field width is specified and the number is shorter, pad with '0' or spaces based on the '0' flag
                    int padding = width - len;
                    while (padding > 0) {
                        *bufptr = zero_padding ? '0' : ' ';
                        bufptr++;
                        padding--;
                        count++;
                    }
                }
                bufptr += len;
                count += len;
            } else if (*format == 'x') {
                // Handle lowercase hexadecimal
                unsigned int num = va_arg(args, unsigned int);
                if (use_prefix && num != 0) {
                    *bufptr = '0';
                    bufptr++;
                    *bufptr = 'x';
                    bufptr++;
                }
                int len = snprintf(bufptr, 1024, "%x", num);
                if (width > 0 && len < width) {
                    // If the field width is specified and the number is shorter, pad with '0' or spaces based on the '0' flag
                    int padding = width - len;
                    while (padding > 0) {
                        *bufptr = zero_padding ? '0' : ' ';
                        bufptr++;
                        padding--;
                        count++;
                    }
                }
                bufptr += len;
                count += len;
            } else if (*format == 'X') {
                // Handle uppercase hexadecimal
                unsigned int num = va_arg(args, unsigned int);
                if (use_prefix && num != 0) {
                    *bufptr = '0';
                    bufptr++;
                    *bufptr = 'X';
                    bufptr++;
                }
                int len = snprintf(bufptr, 1024, "%X", num);
                if (width > 0 && len < width) {
                    // If the field width is specified and the number is shorter, pad with '0' or spaces based on the '0' flag
                    int padding = width - len;
                    while (padding > 0) {
                        *bufptr = zero_padding ? '0' : ' ';
                        bufptr++;
                        padding--;
                        count++;
                    }
                }
                bufptr += len;
                count += len;
            } else if (*format == 'S') {
                // Handle custom specifier for strings
                char *str = va_arg(args, char *);
                if (str == NULL)
                    str = "(null)";
                int len = (strlen(str) > precision && precision >= 0) ? precision : strlen(str);
                if (width > 0 && len < width) {
                    // If the field width is specified and the string is shorter, pad with '0' or spaces based on the '0' flag
                    int padding = width - len;
                    while (padding > 0) {
                        *bufptr = zero_padding ? '0' : ' ';
                        bufptr++;
                        padding--;
                        count++;
                    }
                }
                print_nonprintable(str);
            } else if (*format == 'p') {
                // Handle pointer
                void *ptr = va_arg(args, void *);
                int len = snprintf(bufptr, 1024, "%p", ptr);
                if (width > 0 && len < width) {
                    // If the field width is specified and the pointer representation is shorter, pad with '0' or spaces based on the '0' flag
                    int padding = width - len;
                    while (padding > 0) {
                        *bufptr = zero_padding ? '0' : ' ';
                        bufptr++;
                        padding--;
                        count++;
                    }
                }
                bufptr += len;
                count += len;
            } else if (*format == '%') {
                // Handle %%
                *bufptr = '%';
                bufptr++;
                count++;
            } else {
                // Unknown conversion specifier, ignore it
                *bufptr = '%';
                bufptr++;
                *bufptr = *format;
                bufptr++;
                count += 2;
            }
        } else {
            *bufptr = *format;
            bufptr++;
            count++;
        }
        format++;
    }

    // Ensure the buffer is null-terminated
    *bufptr = '\0';

    // Write the buffer to stdout
    write(1, buffer, strlen(buffer));

    va_end(args);

    return count;
}

int main() {
    char name[] = "John";
    int age = 30;
    char message[] = "Hello, \x02World\x07!";
    void *ptr = &age;

    int char_count = _printf("Hello, my name is %10s and I am %5d years old.\n", name, age);
    printf("\nNumber of characters printed: %d\n", char_count);

    char_count = _printf("Custom specifier S: %10S\n", message);
    printf("\nNumber of characters printed: %d\n", char_count);

    char_count = _printf("Pointer address: %20p\n", ptr);
    printf("\nNumber of characters printed: %d\n", char_count);

    return 0;
}
